{"ast":null,"code":"var _jsxFileName = \"/Users/harrinicole/Documents/GitHub/react-memory-game/memory-game/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport shuffle from 'lodash/shuffle';\nimport Card from './components/Card';\nimport '/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = ['https://picsum.photos/id/10/200/300', 'https://picsum.photos/id/20/200/300', 'https://picsum.photos/id/30/200/300', 'https://picsum.photos/id/40/200/300', 'https://picsum.photos/id/50/200/300', 'https://picsum.photos/id/60/200/300', 'https://picsum.photos/id/70/200/300', 'https://picsum.photos/id/80/200/300'];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [selected, setSelected] = useState([]);\n  useEffect(() => {\n    const shuffledImages = shuffle([...images, ...images]);\n    const initialCards = shuffledImages.map((image, index) => ({\n      id: index,\n      image,\n      matched: false\n    }));\n    setCards(initialCards);\n  }, []);\n  const handleCardClick = card => {\n    if (selected.length === 0) {\n      setSelected([card]);\n    } else if (selected.length === 1) {\n      if (selected[0].id === card.id) {\n        return;\n      }\n      setSelected([...selected, card]);\n      if (selected[0].image === card.image) {\n        setCards(cards.map(c => c.id === selected[0].id || c.id === card.id ? {\n          ...c,\n          matched: true\n        } : c));\n        setSelected([]);\n      } else {\n        setTimeout(() => {\n          setSelected([]);\n        }, 1000);\n      }\n    }\n  };\n  const matchedCards = cards.filter(card => card.matched);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Matching Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        image: card.matched ? null : card.image,\n        onClick: () => handleCardClick(card)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), matchedCards.length === cards.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"win-message\",\n      children: \"Congratulations! You matched all the cards!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rbUG/OmS9zH9+0j40AkRKxPjKAI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","shuffle","Card","jsxDEV","_jsxDEV","images","App","_s","cards","setCards","selected","setSelected","shuffledImages","initialCards","map","image","index","id","matched","handleCardClick","card","length","c","setTimeout","matchedCards","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/harrinicole/Documents/GitHub/react-memory-game/memory-game/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport shuffle from 'lodash/shuffle';\nimport Card from './components/Card';\nimport '/App.css';\n\nconst images = [\n  'https://picsum.photos/id/10/200/300',\n  'https://picsum.photos/id/20/200/300',\n  'https://picsum.photos/id/30/200/300',\n  'https://picsum.photos/id/40/200/300',\n  'https://picsum.photos/id/50/200/300',\n  'https://picsum.photos/id/60/200/300',\n  'https://picsum.photos/id/70/200/300',\n  'https://picsum.photos/id/80/200/300',\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [selected, setSelected] = useState([]);\n\n  useEffect(() => {\n    const shuffledImages = shuffle([...images, ...images]);\n    const initialCards = shuffledImages.map((image, index) => ({\n      id: index,\n      image,\n      matched: false,\n    }));\n    setCards(initialCards);\n  }, []);\n\n  const handleCardClick = (card) => {\n    if (selected.length === 0) {\n      setSelected([card]);\n    } else if (selected.length === 1) {\n      if (selected[0].id === card.id) {\n        return;\n      }\n      setSelected([...selected, card]);\n      if (selected[0].image === card.image) {\n        setCards(cards.map(c => c.id === selected[0].id || c.id === card.id ? { ...c, matched: true } : c));\n        setSelected([]);\n      } else {\n        setTimeout(() => {\n          setSelected([]);\n        }, 1000);\n      }\n    }\n  };\n\n  const matchedCards = cards.filter(card => card.matched);\n\n  return (\n    <div className=\"app\">\n      <h1>Memory Matching Game</h1>\n      <div className=\"board\">\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            image={card.matched ? null : card.image}\n            onClick={() => handleCardClick(card)}\n          />\n        ))}\n      </div>\n      {matchedCards.length === cards.length && (\n        <div className=\"win-message\">Congratulations! You matched all the cards!</div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}